{namespace docs}

/**
 * This template will be rendered by SoyWeb when the user loads static.soy.
 * It deliberately includes dummy data so the designer can get a feel for how
 * the task list will appear with real data rather with minimal copy and paste.
 */
{template .soyweb}
{call main.page}
  {param pageName: 'Documentation' /}
  {param baseDir: './' /}
  {param content}
    {call menu.side}
      {param baseDir: './' /}
      {param cssScope: 'docs' /}
    {/call}

    <div id="main">
      <div class="header" id="introduction">
        <h1>tracking.js</h1>
      </div>

      <div class="content">
        <p>
          This documentation will introduce you to most of the key concepts in working with tracking.js. Don't worry if you don't understand everything. Each of the concepts presented here is described in detail in the <a href="https://github.com/eduardolundgren/tracking.js/tree/master/examples" target="_blank">source code of the examples</a>.
        </p>

        <div class="header">
          <h2 id="before-start">Before you start: getting the project</h2>
        </div>

        <p>
          To get started, <a href="https://github.com/eduardolundgren/tracking.js/archive/master.zip">download the project</a>. This project includes all of the tracking.js examples, source code dependencies you'll need to get started.
        </p>

        <p>
          Unzip the project somewhere on your local drive.
          The package includes an initial version of the project you'll be working with. While you're working, you'll need a basic HTTP server to serve your pages.
          Test out the web server by loading the finished version of the project. For example: <a href="http://localhost:8000/tracking.js/" target="_blank">http://localhost:8000/tracking.js/</a>
        </p>

        <div class="header">
          <h2 id="step-1">Step 1: Creating an example file</h2>
        </div>

        <p>In this step, you'll create an example file under the <code>examples/</code> folder into where you unziped the project under your local drive. Go to this directory and create a file called <code>first_tracking.html</code> file in your favorite editor. The starting file looks like this:</p>

        {literal}
        <pre><code class="html">&lt;!doctype html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta charset="utf-8"&gt;
  &lt;title&gt;tracking.js - first tracking&lt;/title&gt;
  &lt;script src="../build/tracking-min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;script&gt;
  // Start tracking here...
  &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
        {/literal}

        <div class="header">
          <h2 id="step-2">Step 2: Choose what you want to play with</h2>
        </div>

        <p>
          Now that you have <code>first_tracking.html</code> example file created, it's time to choose what technique you want to see in action. There are several examples available on this page, the first one, the <a href="#trackers">Tracker</a>, is just an abstract class to base of the other tracking techniques and cannot be instantiated. One good option to start with is the <a href="#trackers">ColorTracker</a>, copy the snippets available on this section and paste into your example file, in the end it should look something like:
        </p>

        {literal}
        <pre><code class="html">&lt;!doctype html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta charset="utf-8"&gt;
  &lt;title&gt;tracking.js - first tracking&lt;/title&gt;
  &lt;script src="../build/tracking-min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;video id="myVideo" width="400" height="300" preload autoplay loop muted&gt;&lt;/video&gt;
  &lt;script&gt;
  var colors = new tracking.ColorTracker(['magenta', 'cyan', 'yellow']);

  colors.on('track', function(event) {
    if (event.data.length === 0) {
      // No colors were detected in this frame.
    } else {
      event.data.forEach(function(rect) {
        console.log(rect.x, rect.y, rect.height, rect.width, rect.color);
      });
    }
  });

  tracking.track('#myVideo', colors);
  &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
        {/literal}

        <p>
          This example will request your camera and track magenta, cyan and yellow colors that appear in front of it. Look around you and grab any object that matches with one of those colors and watch the console of your browser, it should display the coordinates of all found objects.
        </p>
      </div>

      <div class="header">
        <h2 id="trackers">Trackers</h2>
      </div>

      <div class="content">
        <p>In order to understand how the tracker API works, first you need to instantiate the constructor passing the targets you want to detect. Note that <code class="javascript">tracking.Tracker</code> is an abstract class only used to teach how to use the API.</p>

        {literal}
        <pre><code class="javascript">var myTracker = new tracking.Tracker('target');</code></pre>
        {/literal}

        <p>
          Once you have the tracker instance, you need to know when something happens, that's why you need listen for <code>track</code> events:
        </p>
        {literal}
        <pre><code class="javascript">myTracker.on('track', function(event) {
  if (event.data.length === 0) {
    // No targets were detected in this frame.
  } else {
    event.data.forEach(function(data) {
      // Plots the detected targets here.
    });
  }
});</code></pre>
{/literal}

        <p>
          Now that you have the tracker instance listening for <code>track</code> event, you are ready to start tracking by invoking the track implementation <code class="javascript">myTracker.track(pixels, width, height)</code>. This method handles all the internal logic that processes the pixels and extracts the targets from it.
        </p>

        <p>
          But don't worry, you don't need to read the <code class="html">&lt;canvas&gt;</code>, <code class="html">&lt;img&gt;</code> or <code class="html">&lt;video&gt;</code> pixels manually, tracking.js provides an utility which handles that for you:
        </p>
        {literal}
        <pre><code class="javascript">var trackerTask = tracking.track('#myVideo', myTracker);</code></pre>
        {/literal}

        <p>
          It's also possible to plug the tracker instance in other elements. When tracking a <code class="html">&lt;canvas&gt;</code> or <code class="html">&lt;img&gt;</code>, the utility <code class="javascript">tracking.track('#image', myTracker)</code> invokes only one time <code class="javascript">myTracker.track(pixels, width, height)</code>. All the required arguments are fulfilled automatically, e.g. array of pixels, width and height. When using with a <code class="html">&lt;video&gt;</code> node it is a little bit different, for each video frame the internal track implementation is executed.
        </p>

        <p>
          If you want to have full control of the tracking task you've plugged on the previous example, you may want to continue reading this section. Let's assume you need to stop the tracking from a long-running video:
        </p>

        {literal}
        <pre><code class="javascript">trackerTask.stop(); // Stops the tracking
trackerTask.run(); // Runs it again anytime
</code></pre>
{/literal}

        <p>The previous example was an abstract overview about the tracker API available. Now let's dig into some practical usages of some of the available trackers.</p>
        <p class="content-subinfo"></p>

        <h2 id="color-tracker" class="content-subhead">Color Tracker</h2>
        <p>
          Colors are everywhere in every single object. Being able to handle colored objects to control your browser through the camera is very appealing. For that reason, tracking.js implemented a basic color tracking algorithm that resulted in a real-time frame rate through a simple and intuitive API.
          It offers several significant advantages over geometric cues such as computational simplicity, robustness under partial occlusion and illumination, rotation, scale and resolution changes.
        </p>
        <p>
          In order to use a color tracker, you need to instantiate the constructor passing the colors to detect:
        </p>
        {literal}
        <pre><code class="javascript">var colors = new tracking.ColorTracker(['magenta', 'cyan', 'yellow']);</code></pre>
        {/literal}

        <p>
          Once you have the color tracker instance, you need to know when something happens, that's why you need listen for <code>track</code> events:
        </p>
        {literal}
        <pre><code class="javascript">colors.on('track', function(event) {
  if (event.data.length === 0) {
    // No colors were detected in this frame.
  } else {
    event.data.forEach(function(rect) {
      // rect.x, rect.y, rect.height, rect.width, rect.color
    });
  }
});</code></pre>
{/literal}

        <p>
          Now that you have the tracker instance listening for <code>track</code> event, you are ready to start tracking:
        </p>

        {literal}
        <pre><code class="javascript">tracking.track('#myVideo', colors);</code></pre>
        {/literal}

        <p>
          How do I register my own color? By default tracking.js color tracker provides out of the box three default colors, they are: magenta, cyan and yellow.
          In addition to those, you can register any custom color you want to track, it's very simple, let's assume the color you want to track is green.
          In the RGB color space the green color could be some value close to <code>(r, g, b) = (0, 255, 0)</code>, where <code>(r, g, b)</code> stands for red, green and blue, respectively. Once you understand the color to track in the RGB color space, it's time to register your color using <code class="javascript">tracking.ColorTracker.registerColor</code>.
        </p>

        {literal}
        <pre><code class="javascript">tracking.ColorTracker.registerColor('green', function(r, g, b) {
  if (r &lt; 50 && g &gt; 200 && b &lt; 50) {
    return true;
  }
  return false;
});</code></pre>
        {/literal}

        <p>
          Note that the custom color function returns <code>true</code> to any value that the <code>g</code> value is close to 255, to make sure we exclude other colors that could fit with the green RGB pattern, it also checks <code>r</code> and <code>b</code> values to make sure they are below <code>50</code>, hence close to <code>(r, g, b) = (0, 255, 0)</code>.
        </p>

        <p class="content-subinfo">
          <a class="pure-button" href="http://trackingjs.com/api/tracking.ColorTracker.html" target="_blank">API docs</a>{sp}
          <a class="pure-button pure-button-primary" href="./examples/color_hello_world.html">Live demo &gt;</a>
        </p>

        <h2 id="object-tracker" class="content-subhead">Object Tracker</h2>
        <p>
          Having a rapid object detection as part of the library resulted in interesting examples for web applications, such as detecting faces, mouths, eyes and any other training data that could be added to the library later.
        </p>

        <p>
          In addition to the tracking.js core script, there are some training classifiers, they are going to teach tracking.js core how to recognize the object you want to track, make sure to only include the ones you need, each of them have an average size of ~60 KB:
        </p>

        {literal}
        <pre><code class="html">&lt;script src="tracking.js/build/data/face.js"&gt;&lt;/script&gt;
&lt;script src="tracking.js/build/data/eye.js"&gt;&lt;/script&gt;
&lt;script src="tracking.js/build/data/mouth.js"&gt;&lt;/script&gt;
</code></pre>
        {/literal}

        <p>
          In order to use object tracker, you need to instantiate the constructor passing the classifier data to detect:
        </p>
        {literal}
        <pre><code class="javascript">var objects = new tracking.ObjectTracker(['face', 'eye', 'mouth']);</code></pre>
        {/literal}

        <p>
          Once you have the object tracker instance, you need to know when something happens, that's why you need listen for <code>track</code> events:
        </p>
        {literal}
        <pre><code class="javascript">objects.on('track', function(event) {
  if (event.data.length === 0) {
    // No objects were detected in this frame.
  } else {
    event.data.forEach(function(rect) {
      // rect.x, rect.y, rect.height, rect.width
    });
  }
});</code></pre>
{/literal}

        <p>
          Now that you have the tracker instance listening for <code>track</code> event, you are ready to start tracking:
        </p>

        {literal}
        <pre><code class="javascript">tracking.track('#myVideo', objects);</code></pre>
        {/literal}

        <p class="content-subinfo">
          <a class="pure-button" href="http://trackingjs.com/api/tracking.ObjectTracker.html" target="_blank">API docs</a>{sp}
          <a class="pure-button pure-button-primary" href="./examples/face_hello_world.html">Live demo &gt;</a>
        </p>

        <h2 id="custom-tracker" class="content-subhead">Custom Tracker</h2>
        <p>
          It's easy to create your own tracker whenever you need one.
        </p>

        <p>
          Let's say for example that, for some reason, you need to build an application that finds shadows in images.  Our trackers currently don't support this use case yet, so you'll need to implement the algorithm yourself.
        </p>

        <p>
          Don't walk away yet though! You have the option of building your feature on top of tracking.js and, if you do so, you'll be able to take advantage of all the abstractions it provides, like accessing the camera and getting the pixel matrix through the canvas on every frame.
        </p>

        <p>
          It's simple! First, you just need to create a constructor for your new tracker (let's call it <code class="javascript">MyTracker</code>) and have it inherit from <code class="javascript">tracking.Tracker</code>:
        </p>

        {literal}
        <pre><code class="javascript">var MyTracker = function() {
  MyTracker(this, 'constructor');
}
tracking.inherits(MyTracker, tracking.Tracker);
</code></pre>
        {/literal}

        <p>
          Then, you need to implement the <code>track</code> method for your tracker. It will receive the pixel matrix for the current image (or video frame) and should hold the actual tracking algorithm. When the tracking is done, the code should call the <code>emit</code> method to send the results through the <code>track</code> event:
        </p>
        {literal}
        <pre><code class="javascript">var MyTracker = function() {
  MyTracker.prototype.track = function(pixels, width, height) {
    // Your code here

    this.emit('track', {
      // Your results here
    });
  }
}</code></pre>
        {/literal}

        <p>
          That's it! You can now use your tracker in the same way the other existing trackers are used. First, create an instance of it:
        </p>

        {literal}
        <pre><code class="javascript">var myTracker = new tracking.MyTracker();</code></pre>
        {/literal}

        <p>
          Then, listen to it's <code>track</code> events:
        </p>

        {literal}
        <pre><code class="javascript">myTracker.on('track', function(event) {
  // Results are inside the event
});</code></pre>
        {/literal}

        <p>
          And finally, start tracking:
        </p>

        {literal}
        <pre><code class="javascript">tracking.track('#myVideo', myTracker);</code></pre>
        {/literal}

        <p class="content-subinfo">
          <a class="pure-button" href="http://trackingjs.com/api/tracking.Tracker.html" target="_blank">API docs</a>
        </p>
      </div>

      <div class="header">
        <h2 id="utilities">Utilities</h2>
      </div>

      <div class="content">
        <p>
          For a better understanding of the library architecture, the implementation is divided in several utilities, it also includes several computer vision algorithms to help you implement your custom solutions.
          To develop computer vision applications using only raw JavaScript APIs could be too verbose and complex, e.g. capturing users' camera and reading its array of pixels.
        </p>

        <p>
          The big amount of steps required for a simple task makes web developers life hard when the goal is to achieve complex implementations. Some level of encapsulation is needed in order to simplify development.
          The proposed library provides encapsulation for common tasks on the web platform.
        </p>
        <p class="content-subinfo"></p>

        <h2 id="fast" class="content-subhead">Feature Detection (Fast)</h2>
        <p>
          Provides an implementation of <a href="http://en.wikipedia.org/wiki/Features_from_accelerated_segment_test" target="_blank">Features from Accelerated Segment Test</a> for features detection.
          In other words it finds corners on parts of the image. Fast is faster than many other well-known feature extraction methods.
        </p>

        <p>
          To find corners, tracking.js provides the following utility:
        </p>

        {literal}
        <pre><code class="javascript">var corners = tracking.Fast.findCorners(pixels, width, height);</code></pre>
        {/literal}

        <p class="content-subinfo">
          <a class="pure-button" href="http://trackingjs.com/api/tracking.Fast.html" target="_blank">API docs</a>{sp}
          <a class="pure-button pure-button-primary" href="./examples/fast.html">Live demo &gt;</a>
        </p>

        <h2 id="brief" class="content-subhead">Feature Descriptor (Brief)</h2>
        <p>
          Provides an implementation of <a href="http://cvlabwww.epfl.ch/~lepetit/papers/calonder_eccv10.pdf" target="_blank">Binary Robust Independent Elementary Features</a>. It uses binary strings as an efficient feature point descriptor. As a result, Brief is very fast both to build and to match, perfect for the web.
        </p>

        <p>
          Once you have extracted image features, in our previous example the features were the image corners, you can describe each of them:
        </p>

        {literal}
        <pre><code class="javascript">var descriptors1 = tracking.Brief.getDescriptors(pixels, width, corners1);
var descriptors2 = tracking.Brief.getDescriptors(pixels, width, corners2);</code></pre>
        {/literal}

        <p>
          Brief also provides a method that you can match the features decribed in <code>descriptors1</code> and <code>descriptors2</code>:
        </p>

        {literal}
        <pre><code class="javascript">var matches = tracking.Brief.reciprocalMatch(corners1, descriptors1, corners2, descriptors2);</code></pre>
        {/literal}

        <p class="content-subinfo">
          <a class="pure-button" href="http://trackingjs.com/api/tracking.Brief.html" target="_blank">API docs</a>{sp}
          <a class="pure-button pure-button-primary" href="./examples/brief.html">Live demo &gt;</a>
        </p>

        <h2 id="convolution" class="content-subhead">Convolution</h2>
        <p>
          Convolution filters are very useful generic filters for image processing. The basic idea is that you take the weighed sum of a rectangle of pixels from the source image and use that as the output value. Convolution filters can be used for blurring, sharpening, embossing, edge detection and a whole bunch of other things.
        </p>

        <p>
          In order to horizontally convolve image pixels you can do:
        </p>

        {literal}
        <pre><code class="javascript">tracking.Image.horizontalConvolve(pixels, width, height, weightsVector, opaque);</code></pre>
        {/literal}

        <p>
          In order to vertically convolve image pixels you can do:
        </p>

        {literal}
        <pre><code class="javascript">tracking.Image.verticalConvolve(pixels, width, height, weightsVector, opaque);</code></pre>
        {/literal}

        <p>
          Or, if you need to do a separable convolve:
        </p>

        {literal}
        <pre><code class="javascript">tracking.Image.separableConvolve(pixels, width, height, horizWeights, vertWeights, opaque);</code></pre>
        {/literal}

        <p class="content-subinfo">
          <a class="pure-button" href="http://trackingjs.com/api/tracking.Image.html#horizontalConvolve" target="_blank">API docs</a>
        </p>

        <h2 id="gray-scale" class="content-subhead">Gray Scale</h2>
        <p>
          Converts a color from a colorspace based on an RGB color model to a grayscale representation of its luminance.
          The coefficients represent the measured intensity perception of typical trichromat humans, in particular, human vision is most sensitive to green and least sensitive to blue.
        </p>

        <p>
          To convert the images pixels into grayscale:
        </p>

        {literal}
        <pre><code class="javascript">tracking.Image.grayscale(pixels, width, height, fillRGBA);</code></pre>
        {/literal}

        <p class="content-subinfo">
          <a class="pure-button" href="http://trackingjs.com/api/tracking.Image.html#grayscale" target="_blank">API docs</a>
        </p>

        <h2 id="image-blur" class="content-subhead">Image Blur</h2>
        <p>
          A Gaussian blur (also known as Gaussian smoothing) is the result of blurring an image by a Gaussian function. It is a widely used effect in graphics software, typically to reduce image noise and reduce detail.
          Gaussian smoothing is also used as a pre-processing stage in computer vision algorithms in order to enhance image structures at different scales.
        </p>

        <p>
          To blur the images pixels using tracking.js you can do:
        </p>

        {literal}
        <pre><code class="javascript">tracking.Image.blur(pixels, width, height, diameter);</code></pre>
        {/literal}

        <p class="content-subinfo">
          <a class="pure-button" href="http://trackingjs.com/api/tracking.Image.html#blur" target="_blank">API docs</a>
        </p>

        <h2 id="integral-image" class="content-subhead">Integral Image</h2>
        <p>
          A summed area table is a data structure and algorithm for quickly and efficiently generating the sum of values in a rectangular subset of a grid. In the image processing domain, it is also known as an integral image.
        </p>

        <p>
          To compute the images pixels using tracking.js you can do:
        </p>

        {literal}
        <pre><code class="javascript">tracking.Image.computeIntegralImage(
    pixels, width, height, opt_integralImage, opt_integralImageSquare,
    opt_tiltedIntegralImage, opt_integralImageSobel);</code></pre>
        {/literal}

        <p class="content-subinfo">
          <a class="pure-button" href="http://trackingjs.com/api/tracking.Image.html#computeIntegralImage" target="_blank">API docs</a>
        </p>

        <h2 id="sobel" class="content-subhead">Sobel</h2>
        <p>
          Computes the vertical and horizontal gradients of the image and combines the computed images to find edges in the image.
          The way we implement the Sobel filter here is by first grayscaling the image, then taking the horizontal and vertical gradients and finally combining the gradient images to make up the final image.
        </p>

        <p>
          To compute the edges of the image pixels using tracking.js you can do:
        </p>

        {literal}
        <pre><code class="javascript">tracking.Image.sobel(pixels, width, height);</code></pre>
        {/literal}

        <p class="content-subinfo">
          <a class="pure-button" href="http://trackingjs.com/api/tracking.Image.html#sobel" target="_blank">API docs</a>
        </p>

        <h2 id="viola-jones" class="content-subhead">Viola Jones</h2>
        <p>
          The <a href="http://en.wikipedia.org/wiki/Viola%E2%80%93Jones_object_detection_framework" target="_blank">Viola–Jones</a> object detection framework is the first object detection framework to provide competitive object detection rates in real-time.
          This techinique is used inside <code>tracking.ObjectTracker</code> implementation.
        </p>

        <p>
          To use Viola Jones to detect an object of an image pixels using tracking.js you can do:
        </p>

        {literal}
        <pre><code class="javascript">tracking.ViolaJones.detect(pixels, width, height, initialScale, scaleFactor, stepSize, edgesDensity, classifier);</code></pre>
        {/literal}

        <p class="content-subinfo">
          <a class="pure-button" href="http://trackingjs.com/api/tracking.ViolaJones.html" target="_blank">API docs</a>
        </p>

      </div>

      <div class="header">
        <h2 id="web-components">Web Components</h2>
      </div>

      <div class="content">
        <p>
          Many of the existing computer vision frameworks are not available on the web, in addition, they are too complex to learn and to use. The main goal of tracking.js is to provide those complex techniques in a simple and intuitive way on the web. We believe computer vision is important to improve people's life, bringing it to the web will make this future a reality a lot faster.
        </p>

        <p>
          We also believe that <a href="http://webcomponents.org" target="_blank">Web Components</a> are the future of encapsulation on the web, therefore tracking.js library features are available for you as custom elements on the <a href="https://github.com/eduardolundgren/tracking-elements" target="_blank">tracking-elements</a> repository.
        </p>

        <p>
          Can you imagine tagging your friend's face in a picture with one line of HTML? Or, tracking a user's face with the same API? This section will show how you can do that. This will require <a href="http://bower.io" target="_blank">Bower</a> — a front end package manager. Once you have bower installed, install tracking-elements:
        </p>

        {literal}
        <pre><code class="sh">$ bower install tracking-elements --save</code></pre>
        {/literal}

        <p>After install tracking-elements few custom elements are available. They extends the native <code class="html">&lt;canvas&gt;</code>, <code class="html">&lt;img&gt;</code> and <code class="html">&lt;video&gt;</code> with tracking functionality.</p>

        <p class="content-subinfo"></p>

        <h2 id="color-element" class="content-subhead">Color Element</h2>

        <p>
          As a first step of using tracking.js web components you need to learn how to extends a native DOM element with tracking functionality using the attribute <code class="html">is=""</code>. The tracking target is set through <code class="html">target=""</code> attribute and accepts different values depending on the tracker you are using, e.g. colors or objects.
        </p>

        <pre><code class="html">&lt;img is="image-color-tracking" target="magenta cyan yellow" /&gt;{\n}
&lt;canvas is="canvas-color-tracking" target="magenta cyan yellow"&gt;&lt;/canvas&gt;{\n}
&lt;video is="video-color-tracking" target="magenta cyan yellow"&gt;&lt;/video&gt;</code></pre>

        <p>
          Elements extending <code class="html">&lt;video&gt;</code> could request the user's camera using the attribute <code class="html">camera="true"</code>. Note that passing that the browser will request the user to allow their camera to be shared. The custom elements exposes events and methods from <code class="javascript">Tracker</code>, for more information go to <a href="http://trackingjs.com/api/" target="_blank">the API docs</a>. The next example will cover an example how to tag friends faces on a picture using <code>ObjectTracker</code>.
        </p>

        <p class="content-subinfo">
          <a class="pure-button" href="https://github.com/eduardolundgren/tracking-elements#color-tracker" target="_blank">API docs</a>{sp}
          <a class="pure-button pure-button-primary" href="http://eduardolundgren.github.io/tracking-elements/examples/color.html">Live demo &gt;</a>
        </p>

        <h2 id="object-element" class="content-subhead">Object Element</h2>

        <p>
          Let's create an example that you can place an image with your friends faces and mark with a rectangle each of them. In this step, you'll create an example file under the <code>examples/</code> folder into where you unziped the project under your local drive. Go to this directory and create a file called <code>tracking_element.html</code> file in your favorite editor. The starting file looks like this:
        </p>

        {literal}
        <pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;!-- Importing Web Component's Polyfill --&gt;
  &lt;script src="../bower_components/platform/platform.js"&gt;&lt;/script&gt;
  &lt;!-- Importing Custom Elements --&gt;
  &lt;link rel="import" href="../src/image-object-tracking.html"&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;!-- Using Custom Elements --&gt;
  &lt;img is="image-object-tracking" target="face" src="assets/faces.png" /&gt;
  &lt;script&gt;
    // Plots rectangles here.
  &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
        {/literal}

        <p>
          The next step will teach you how to plot rectangles on your friends faces, you can listen for <code>track</code> events direct from your DOM element, e.g. <code class="javascript">img.addEventListener('track', doSomething)</code>. The event fires when all faces are found on the image. The event payload (<code>event.data</code>) is an array of objects containing all the faces coordinates. Now just pass them to the helper function <code class="javascript">plotRectangles</code> to plot each face.
        </p>

        {literal}
        <pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;!-- Importing Web Component's Polyfill --&gt;
  &lt;script src="../bower_components/platform/platform.js"&gt;&lt;/script&gt;
  &lt;!-- Importing Custom Elements --&gt;
  &lt;link rel="import" href="../src/image-object-tracking.html"&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;!-- Using Custom Elements --&gt;
  &lt;img is="image-object-tracking" target="face" src="assets/faces.png" /&gt;
  &lt;script&gt;
    var img = document.querySelector('img');

    // Fires when faces are found on the image.
    img.addEventListener('track', function(event) {
      event.detail.data.forEach(function(rect) {
        plotRectangle(img, rect);
      });
    });

    function plotRectangle(el, rect) {
      var div = document.createElement('div');
      div.style.position = 'absolute';
      div.style.border = '2px solid ' + (rect.color || 'magenta');
      div.style.width = rect.width + 'px';
      div.style.height = rect.height + 'px';
      div.style.left = el.offsetLeft + rect.x + 'px';
      div.style.top = el.offsetTop + rect.y + 'px';
      document.body.appendChild(div);
      return div;
    }
  &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
        {/literal}

        <p class="content-subinfo">
          <a class="pure-button" href="https://github.com/eduardolundgren/tracking-elements#object-tracker" target="_blank">API docs</a>{sp}
          <a class="pure-button pure-button-primary" href="http://eduardolundgren.github.io/tracking-elements/examples/object.html">Live demo &gt;</a>
        </p>

      </div>
    </div>
    <script src="http://cdn.alloyui.com/3.0.0pr2/aui/aui-min.js"></script>
    <script>
    {literal}
      YUI().use('aui-scrollspy', function(Y) {
        new Y.Scrollspy({
          activeClass: 'pure-menu-selected',
          target: '#menu'
        });
      });
    {/literal}
    </script>
  {/param}
{/call}
{/template}
